openapi: 3.0.3

info:
  title: API сервер для личного проекта «Что посмотреть»
  description: Список ресурсов и маршрутов сервера «Что посмотреть»
  version: 1.0.0

servers:
  - url: http://localhost:4200/

tags:
  - name: users
    description: Действия с пользователем
  - name: movies
    description: Действия с фильмами
  - name: comments
    description: Действия с комментариями
  - name: watch-later
    description: Действия с коллекцией "Смотреть позже"

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: Успешно. Пользователь зарегистрирован. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует

        "400":
          description: Объект пользователя не прошёл валидацию

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля

      requestBody:
        required: true
        description: Логин и пароль авторизующегося пользователя
        content:
          application/json:
            schema:
              type: object

              properties:
                email:
                  type: string
                  format: email
                  example: some@mail.ru

                password:
                  type: string
                  minLength: 6
                  maxLength: 12
                  example: somepass

      responses:
        "200":
          description: Успешно. Пользователь авторизован. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
                description: Информация о пользователе и токен используемый для авторизации

        "401":
          description: Неправильные пароль или логин

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию об авторизованном пользователе

      security:
        - bearerAuth: []

      responses:
        "200":
          description: Успешно. Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Заголовок Authorization содержит неверный токен

  /users/login/avatar:
    put:
      tags:
        - users
      summary: Загрузка аватара пользователя

      security:
        - bearerAuth: []

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary

      responses:
        "201":
          description: Успешно. Аватар добавлен. Ссылка на аватар
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadAvatar'

        "401":
          description: Заголовок Authorization содержит неверный токен

  /movies:
    post:
      tags:
        - movies
      summary: Добавление нового фильма
      description: Добавляет новый фильм

      security:
        - bearerAuth: []

      requestBody:
        description: Информация для добавления нового фильма
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMovie'
        required: true

      responses:
        "201":
          description: Успешно. Фильм добавлен. Объект фильма
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "401":
          description: Заголовок Authorization содержит неверный токен

        "400":
          description: Объект фильма не прошёл валидацию

    get:
      tags:
        - movies
      summary: Получение списка фильмов
      description: Получает список фильмов не больше указанного количества указанного жанра

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 0
            example: 60
            default: 60
          description: Максимальное требуемое количество вхождений в запрошенный список

        - in: query
          name: genre
          schema:
            $ref: '#/components/schemas/genre'
          description: Жанр, к которому должны относиться все вхождения в запрошенном списке

      responses:
        "200":
          description: Успешно. Список фильмов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movieListItem'

        "400":
          description: Запрошено невалидное количество фильмов

  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Получение информации о фильме
      description: Получает информацию о фильме

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            example: 63c73e327c6f3f1f3475e54b
          required: true
          description: Идентификатор фильма

      responses:
        "200":
          description: Успешно. Информация о фильме
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "404":
          description: Фильм с указанным идентификатором не существует

    put:
      tags:
        - movies
      summary: Редактирование информации о фильме
      description: Редактирует информацию о фильме

      security:
        - bearerAuth: []

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            example: 63c73e327c6f3f1f3475e54b
          required: true
          description: Идентификатор фильма

      requestBody:
        description: Идентификатор фильма и подлежащая изменению информация о нём
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateMovie'
        required: true

      responses:
        "200":
          description: Успешно. Фильм обновлён. Объект фильма
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "401":
          description: Заголовок Authorization содержит неверный токен

        "404":
          description: Фильм с указанным идентификатором не существует

        "400":
          description: Объект, описывающий изменения, производимые над объектом фильма, не прошёл валидацию

    delete:
      tags:
        - movies
      summary: Удаление информации о фильме
      description: Удаляет информацию о фильме

      security:
        - bearerAuth: []

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            example: 63c73e327c6f3f1f3475e54b
          required: true
          description: Идентификатор фильма

      responses:
        "204":
          description: Успешно. Фильм удалён

        "401":
          description: Заголовок Authorization содержит неверный токен

        "404":
          description: Фильм с указанным идентификатором не существует

  /movies/promo:
    get:
      tags:
        - movies
      summary: Получение информации о промо-фильме
      description: Получает информацию о промо-фильме

      responses:
        "200":
          description: Успешно. Информация о промо-фильме
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

  /watch-later:
    get:
      tags:
        - watch-later
      summary: Получение списка фильмов «К просмотру»
      description: Получает список фильмов «К просмотру»

      security:
        - bearerAuth: []

      responses:
        "200":
          description: Успешно. Список фильмов «К просмотру»
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movieListItem'

        "401":
          description: Заголовок Authorization содержит неверный токен

    post:
      tags:
        - watch-later
      summary: Добавление фильма в список "К просмотру"
      description: Добавляет фильм в список "К просмотру"

      security:
        - bearerAuth: []

      requestBody:
        description: Идентификатор фильма
        content:
          application/json:
            schema:
              type: object

              properties:
                movieId:
                  type: string
                  example: 63c73e327c6f3f1f3475e54b

              required:
                - movieId

      responses:
        "204":
          description: Успешно. Фильм добавлен в список "К просмотру"

        "401":
          description: Заголовок Authorization содержит неверный токен

    delete:
      tags:
        - watch-later
      summary: Удаление фильма из списка "К просмотру"
      description: Удаляет фильм из списка "К просмотру"

      security:
        - bearerAuth: []

      requestBody:
        description: Идентификатор фильма
        content:
          application/json:
            schema:
              type: object

              properties:
                movieId:
                  type: string
                  example: 63c73e327c6f3f1f3475e54b

              required:
                - movieId

      responses:
        "204":
          description: Успешно. Фильм удален из списка "К просмотру"

        "401":
          description: Заголовок Authorization содержит неверный токен

        "404":
          description: Список "К просмотру" не содержит фильм с указанным идентификатором

  /movies/{movieId}/comments:
    get:
      tags:
        - comments
      summary: Получение списка из 50 последних комментариев к заданному фильму
      description: Получает список из 50 последних комментариев к заданному фильму

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            example: 63c73e327c6f3f1f3475e54b
          required: true
          description: Идентификатор фильма

      responses:
        "200":
          description: Успешно. Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'

        "404":
          description: Фильм с указанным идентификатором не существует

    post:
      tags:
        - comments
      summary: Добавить новый комментарий к заданному фильму
      description: Добавляет новый комментарий к заданному фильму

      security:
        - bearerAuth: []

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            example: 63c73e327c6f3f1f3475e54b
          required: true
          description: Идентификатор фильма

      requestBody:
        description: Информация для добавления нового комментария
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'

      responses:
        "200":
          description: Успешно. Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

        "401":
          description: Заголовок Authorization содержит неверный токен

        "404":
          description: Фильм с заданным идентификатором не существует

        "400":
          description: Объект комментария не прошёл валидацию

components:
  schemas:
    genre:
      type: string
      enum:
        [
          comedy,
          crime,
          documentary,
          drama,
          horror,
          family,
          romance,
          scifi,
          thriller,
        ]
      example: thriller

    createUser:
      type: object

      properties:
        email:
          type: string
          format: email
          example: some@mail.ru

        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Name

        password:
          type: string
          minLength: 6
          maxLength: 12
          example: somepass

        avatarUri:
          type: string
          example: example.jpg

      required:
        - "email"
        - "name"
        - "password"

    user:
      type: object

      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Name

        avatarUri:
          type: string
          example: example.jpg

        email:
          type: string
          format: email
          example: some@mail.ru

    loggedUser:
      type: object

      properties:
        token:
          type: string

        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Name

        avatarUri:
          type: string
          example: example.jpg

        email:
          type: string
          format: email
          example: some@mail.ru

    createMovie:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Фильм

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Описание

        publicationDate:
          type: string
          format: date-time
          example: 2033-11-22T11:22:33.000Z

        genre:
          $ref: '#/components/schemas/genre'

        releaseYear:
          type: integer
          minimum: 0

        videoPreviewUri:
          type: string
          example: example.mp4

        videoUri:
          type: string
          example: example.mp4

        cast:
          type: array
          items:
            type: string
          uniqueItems: true
          example: ["Актёр", "Актьор"]

        producer:
          type: string
          minLength: 2
          maxLength: 50
          example: Продюсер

        duration:
          type: number
          minimum: 0

        posterUri:
          type: string
          example: example.jpg

        backgroundImageUri:
          type: string
          example: example.jpg

        backgroundColor:
          type: string
          example: '#0000'

      required:
        - title
        - description
        - genre
        - releaseYear
        - videoPreviewUri
        - videoUri
        - cast
        - producer
        - duration
        - userId
        - posterUri
        - backgroundImageUri
        - backgroundColor

    movie:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Фильм

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Описание

        publicationDate:
          type: string
          format: date-time
          example: 2033-11-22T11:22:33.000Z

        genre:
          $ref: '#/components/schemas/genre'

        releaseYear:
          type: integer
          minimum: 0

        rating:
          type: integer
          minimum: 0
          maximum: 10

        videoPreviewUri:
          type: string
          example: example.mp4

        videoUri:
          type: string
          example: example.mp4

        cast:
          type: array
          items:
            type: string
          uniqueItems: true
          example: ["Актёр", "Актьор"]

        producer:
          type: string
          minLength: 2
          maxLength: 50
          example: Продюсер

        duration:
          type: number
          minimum: 0

        commentAmount:
          type: integer
          minimum: 0

        user:
          $ref: '#/components/schemas/user'

        posterUri:
          type: string
          example: example.jpg

        backgroundImageUri:
          type: string
          example: example.jpg

        backgroundColor:
          type: string
          example: '#0000'

      required:
        - title
        - description
        - publicationDate
        - genre
        - releaseYear
        - rating
        - videoPreviewUri
        - videoUri
        - cast
        - producer
        - duration
        - commentAmount
        - user
        - posterUri
        - backgroundImageUri
        - backgroundColor

    updateMovie:
      $ref: '#/components/schemas/createMovie'

    movieListItem:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Фильм

        publicationDate:
          type: string
          format: date-time
          example: 2033-11-22T11:22:33.000Z

        genre:
          $ref: '#/components/schemas/genre'

        videoPreviewUri:
          type: string
          example: example.mp4

        user:
          $ref: '#/components/schemas/user'

        posterUri:
          type: string
          example: example.jpg

        commentAmount:
          type: integer
          minimum: 0

      required:
        - title
        - publicationDate
        - genre
        - videoPreviewUri
        - user
        - posterUri
        - commentAmount

    comment:
      type: object

      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024

        rating:
          type: integer
          minimum: 0
          maximum: 10

        date:
          type: string
          format: date-time
          example: 2033-11-22T11:22:33.000Z

        user:
          $ref: '#/components/schemas/user'

      required:
        - text
        - rating
        - user

    createComment:
      type: object

      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024

        rating:
          type: integer
          minimum: 0
          maximum: 10

        date:
          type: string
          format: date-time
          example: 2033-11-22T11:22:33.000Z

      required:
        - text
        - rating

    uploadAvatar:
      type: object

      properties:
        avatarUri:
          type: string
          example: example.jpg

      required:
        - avatarUri

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: В формате '`JWT`', без префикса '`Bearer`'
      bearerFormat: JWT